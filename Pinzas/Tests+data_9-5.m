dataA=[0.000000000E0	-1.280000000E2	-4.693333333E2
9.982032342E-2	-1.279848186E2	-4.690959650E2
1.996406468E-1	-1.274088235E2	-4.675997806E2
2.994609703E-1	-1.269118674E2	-4.675990824E2
3.992812937E-1	-1.274902025E2	-4.685359701E2
4.991016171E-1	-1.262837005E2	-4.645115472E2
5.989219405E-1	-1.250824308E2	-4.576254193E2
6.987422639E-1	-1.200327817E2	-4.557383525E2
7.985625873E-1	-1.120876878E2	-4.521383194E2
8.983829108E-1	-1.120736767E2	-4.498512386E2
9.982032342E-1	-1.076548503E2	-4.486182682E2
1.098023558E0	-1.039336889E2	-4.469794621E2
1.197843881E0	-1.043162327E2	-4.465180931E2
1.297664204E0	-1.028212217E2	-4.463851253E2
1.397484528E0	-1.052572959E2	-4.464829774E2
1.497304851E0	-1.077453549E2	-4.441086100E2
1.597125175E0	-1.079537414E2	-4.485667385E2
1.696945498E0	-1.063880110E2	-4.504552421E2
1.796765822E0	-1.070964598E2	-4.484076428E2
1.896586145E0	-1.108149809E2	-4.505399324E2
1.996406468E0	-1.113109147E2	-4.525487950E2
2.096226792E0	-1.050695050E2	-4.542459078E2
2.196047115E0	-1.027703336E2	-4.612670630E2
2.295867439E0	-1.058716299E2	-4.625405091E2
2.395687762E0	-9.939512401E1	-4.662315800E2
2.495508085E0	-9.312406933E1	-4.610849712E2
2.595328409E0	-9.075267606E1	-4.553055463E2
2.695148732E0	-8.566589779E1	-4.552028841E2
2.794969056E0	-8.600962544E1	-4.510171793E2
2.894789379E0	-8.792811172E1	-4.540896165E2
2.994609703E0	-9.633393927E1	-4.492634008E2
3.094430026E0	-9.592727066E1	-4.409220905E2
3.194250349E0	-9.293464515E1	-4.399944039E2
3.294070673E0	-9.381965493E1	-4.365785224E2
3.393890996E0	-9.395503143E1	-4.337157405E2
3.493711320E0	-8.813931250E1	-4.311072321E2
3.593531643E0	-8.772738456E1	-4.262500651E2
3.693351966E0	-8.815859834E1	-4.194651469E2
3.793172290E0	-8.240683287E1	-4.143057604E2
3.892992613E0	-8.144983837E1	-4.112962748E2
3.992812937E0	-7.687888283E1	-4.108695192E2
4.092633260E0	-7.755481817E1	-4.130716698E2
4.192453584E0	-7.368070136E1	-4.111105434E2
4.292273907E0	-7.633018432E1	-4.116554895E2
4.392094230E0	-7.995764025E1	-4.130985618E2
4.491914554E0	-7.993209603E1	-4.091525834E2
4.591734877E0	-7.993653922E1	-4.078637064E2
4.691555201E0	-7.992594980E1	-4.092045576E2
4.791375524E0	-7.588657905E1	-4.096090656E2
4.891195847E0	-7.234057793E1	-4.134286378E2
4.991016171E0	-6.797729402E1	-4.134872607E2
5.090836494E0	-6.785710634E1	-4.133582564E2
5.190656818E0	-6.776270969E1	-4.149643700E2
5.290477141E0	-7.169949654E1	-4.073265793E2
5.390297465E0	-7.082784590E1	-3.994272537E2
5.490117788E0	-6.989931950E1	-3.993528603E2
5.589938111E0	-7.139705155E1	-3.962048057E2
5.689758435E0	-6.800596915E1	-3.919618492E2
5.789578758E0	-6.006012043E1	-3.913186466E2
5.889399082E0	-6.000744094E1	-3.913776415E2
5.989219405E0	-5.825544246E1	-3.915306558E2
6.089039728E0	-5.361442098E1	-3.954910766E2
6.188860052E0	-5.213288297E1	-3.971456943E2
6.288680375E0	-5.236286219E1	-3.953524016E2
6.388500699E0	-5.314753630E1	-3.957328542E2
6.488321022E0	-5.337230822E1	-3.896909255E2
6.588141346E0	-5.514888188E1	-3.872092325E2
6.687961669E0	-5.192543935E1	-3.876650456E2
6.787781992E0	-5.122282178E1	-3.873599641E2
6.887602316E0	-5.114941020E1	-3.833972651E2
6.987422639E0	-5.289885914E1	-3.777044408E2
7.087242963E0	-5.691143451E1	-3.778205110E2
7.187063286E0	-5.298549468E1	-3.811191432E2
7.286883610E0	-5.119496657E1	-3.832022315E2
7.386703933E0	-5.298965279E1	-3.828701496E2
7.486524256E0	-5.313540865E1	-3.782401767E2
7.586344580E0	-5.677172370E1	-3.734618785E2
7.686164903E0	-5.312722689E1	-3.729227760E2
7.785985227E0	-5.084780635E1	-3.713788749E2
7.885805550E0	-5.084077284E1	-3.717271329E2
7.985625873E0	-5.103061809E1	-3.738270886E2
8.085446197E0	-5.081790830E1	-3.787801103E2
8.185266520E0	-4.730368175E1	-3.836847565E2
8.285086844E0	-4.740805514E1	-3.768604147E2
8.384907167E0	-4.686270403E1	-3.708023687E2
8.484727491E0	-4.888272327E1	-3.663313621E2
8.584547814E0	-4.920097509E1	-3.685262211E2
8.684368137E0	-4.483650106E1	-3.689507493E2
8.784188461E0	-4.297118715E1	-3.683190345E2
8.884008784E0	-4.013863478E1	-3.665770058E2
8.983829108E0	-3.912114895E1	-3.650896441E2
9.083649431E0	-3.988654823E1	-3.664192426E2
9.183469754E0	-4.189971656E1	-3.671802524E2
9.283290078E0	-4.302755696E1	-3.662118727E2
9.383110401E0	-3.854117709E1	-3.629327972E2
9.482930725E0	-4.209360730E1	-3.662517145E2
9.582751048E0	-4.437168567E1	-3.604094771E2
9.682571372E0	-4.094667662E1	-3.607150209E2
9.782391695E0	-4.072634542E1	-3.603761527E2
9.882212018E0	-4.193373971E1	-3.597532366E2
9.982032342E0	-4.100184090E1	-3.546516231E2
1.008185267E1	-4.103869624E1	-3.504897115E2
1.018167299E1	-4.108396392E1	-3.531951649E2
1.028149331E1	-4.094152541E1	-3.519361837E2
1.038131364E1	-3.889368601E1	-3.482846025E2
1.048113396E1	-3.979311216E1	-3.495932468E2
1.058095428E1	-4.159015541E1	-3.458992252E2
1.068077461E1	-4.061858869E1	-3.373464777E2
1.078059493E1	-4.301164618E1	-3.351772122E2
1.088041525E1	-3.763912979E1	-3.290944796E2
1.098023558E1	-3.932337075E1	-3.276205548E2
1.108005590E1	-4.350500386E1	-3.269040981E2
1.117987622E1	-4.207893932E1	-3.229207874E2
1.127969655E1	-4.336864520E1	-3.235951841E2
1.137951687E1	-4.404649857E1	-3.253764473E2
1.147933719E1	-3.861805316E1	-3.231472359E2
1.157915752E1	-3.333617156E1	-3.194344049E2
1.167897784E1	-3.439371611E1	-3.188278508E2
1.177879816E1	-3.677093056E1	-3.212614027E2
1.187861849E1	-3.439337643E1	-3.184077800E2
1.197843881E1	-3.311569437E1	-3.198116966E2
1.207825913E1	-3.542606888E1	-3.178294422E2
1.217807946E1	-3.511788052E1	-3.160530987E2
1.227789978E1	-3.031891298E1	-3.096426096E2
1.237772010E1	-3.128175192E1	-3.088013992E2
1.247754043E1	-3.526208594E1	-3.087218735E2
1.257736075E1	-3.501517303E1	-3.026770055E2
1.267718107E1	-3.881795289E1	-2.964840914E2
1.277700140E1	-3.738250201E1	-2.946959259E2
1.287682172E1	-3.716953804E1	-2.887865332E2
1.297664204E1	-3.489874025E1	-2.889511630E2
1.307646237E1	-3.287710289E1	-2.843708988E2
1.317628269E1	-3.294779593E1	-2.814863333E2
1.327610301E1	-3.568028411E1	-2.841773639E2
1.337592334E1	-3.736036571E1	-2.848076588E2
1.347574366E1	-4.681184761E1	-2.783397160E2
1.357556398E1	-4.725139550E1	-2.787374206E2
1.367538431E1	-4.581061314E1	-2.762646524E2
1.377520463E1	-4.699389459E1	-2.739814962E2
1.387502496E1	-4.653739802E1	-2.702402016E2
1.397484528E1	-4.442852114E1	-2.725711839E2
1.407466560E1	-4.036129354E1	-2.743008015E2
1.417448593E1	-3.704993765E1	-2.783835551E2
1.427430625E1	-3.308111450E1	-2.804393458E2
1.437412657E1	-3.374316909E1	-2.760500832E2
1.447394690E1	-2.635260034E1	-2.783762184E2
1.457376722E1	-2.704030048E1	-2.784989951E2
1.467358754E1	-2.697495807E1	-2.784223332E2];

dataB=[0.000000000E0	-3.390877193E2	3.531228070E2
9.982032342E-2	-3.395449102E2	3.542710160E2
1.996406468E-1	-3.354744617E2	3.515034048E2
2.994609703E-1	-3.351460147E2	3.508527705E2
3.992812937E-1	-3.386013789E2	3.432762019E2
4.991016171E-1	-3.351487651E2	3.432507678E2
5.989219405E-1	-3.363963520E2	3.480828647E2
6.987422639E-1	-3.353041721E2	3.524406954E2
7.985625873E-1	-3.329705638E2	3.525178912E2
8.983829108E-1	-3.292348029E2	3.515563188E2
9.982032342E-1	-3.268364770E2	3.512555736E2
1.098023558E0	-3.271277779E2	3.515805672E2
1.197843881E0	-3.311312980E2	3.522231052E2
1.297664204E0	-3.323141935E2	3.560515377E2
1.397484528E0	-3.326392735E2	3.538690256E2
1.497304851E0	-3.309887559E2	3.510706055E2
1.597125175E0	-3.311935227E2	3.473532853E2
1.696945498E0	-3.335055804E2	3.476077749E2
1.796765822E0	-3.334869090E2	3.454395400E2
1.896586145E0	-3.313007674E2	3.451451607E2
1.996406468E0	-3.309870811E2	3.448203644E2
2.096226792E0	-3.255607407E2	3.414103151E2
2.196047115E0	-3.255491765E2	3.474312268E2
2.295867439E0	-3.232818228E2	3.509959852E2
2.395687762E0	-3.269241677E2	3.492582264E2
2.495508085E0	-3.315189095E2	3.501118638E2
2.595328409E0	-3.314235065E2	3.549307168E2
2.695148732E0	-3.311243698E2	3.594520988E2
2.794969056E0	-3.290537484E2	3.573414952E2
2.894789379E0	-3.314960433E2	3.590845462E2
2.994609703E0	-3.369263911E2	3.630750652E2
3.094430026E0	-3.390813628E2	3.651487624E2
3.194250349E0	-3.427981092E2	3.652207945E2
3.294070673E0	-3.397337823E2	3.650444142E2
3.393890996E0	-3.384149664E2	3.692656526E2
3.493711320E0	-3.348014559E2	3.674937646E2
3.593531643E0	-3.295600553E2	3.650229199E2
3.693351966E0	-3.257133293E2	3.670033765E2
3.793172290E0	-3.263260558E2	3.680862579E2
3.892992613E0	-3.244589712E2	3.712293753E2
3.992812937E0	-3.247299338E2	3.722896354E2
4.092633260E0	-3.252147451E2	3.652833757E2
4.192453584E0	-3.266575051E2	3.656716699E2
4.292273907E0	-3.259749094E2	3.701864646E2
4.392094230E0	-3.270570932E2	3.743761467E2
4.491914554E0	-3.272783126E2	3.745459547E2
4.591734877E0	-3.300202028E2	3.762743122E2
4.691555201E0	-3.309958370E2	3.800006246E2
4.791375524E0	-3.284285008E2	3.817125511E2
4.891195847E0	-3.295421871E2	3.784860353E2
4.991016171E0	-3.316264149E2	3.820037331E2
5.090836494E0	-3.314260887E2	3.782620730E2
5.190656818E0	-3.292818898E2	3.818084270E2
5.290477141E0	-3.286672515E2	3.810074018E2
5.390297465E0	-3.299346466E2	3.790636721E2
5.490117788E0	-3.299812362E2	3.805152191E2
5.589938111E0	-3.276400282E2	3.783421441E2
5.689758435E0	-3.277772090E2	3.803638354E2
5.789578758E0	-3.274587639E2	3.845274777E2
5.889399082E0	-3.277819942E2	3.826399952E2
5.989219405E0	-3.270403727E2	3.816124383E2
6.089039728E0	-3.269584243E2	3.826675049E2
6.188860052E0	-3.231088793E2	3.770797410E2
6.288680375E0	-3.231674337E2	3.773651496E2
6.388500699E0	-3.218332292E2	3.798405178E2
6.488321022E0	-3.216869353E2	3.839871306E2
6.588141346E0	-3.204706483E2	3.865360202E2
6.687961669E0	-3.213550121E2	3.868607641E2
6.787781992E0	-3.244708233E2	3.881716284E2
6.887602316E0	-3.251508666E2	3.891045354E2
6.987422639E0	-3.281270344E2	3.883443169E2
7.087242963E0	-3.222907495E2	3.870371850E2
7.187063286E0	-3.253121522E2	3.876805781E2
7.286883610E0	-3.309987703E2	3.908453733E2
7.386703933E0	-3.293459459E2	3.929885897E2
7.486524256E0	-3.313473970E2	4.012624405E2
7.586344580E0	-3.302654437E2	4.023330691E2
7.686164903E0	-3.297703482E2	4.044946264E2
7.785985227E0	-3.353086211E2	4.044203464E2
7.885805550E0	-3.331626783E2	4.116471138E2
7.985625873E0	-3.322677290E2	4.189419525E2
8.085446197E0	-3.318324413E2	4.280655261E2
8.185266520E0	-3.327228227E2	4.282758355E2
8.285086844E0	-3.326510422E2	4.281991006E2
8.384907167E0	-3.346632472E2	4.320118591E2
8.484727491E0	-3.349438363E2	4.334499243E2
8.584547814E0	-3.346817141E2	4.351920568E2
8.684368137E0	-3.383198009E2	4.439625846E2
8.784188461E0	-3.392067960E2	4.491398364E2
8.884008784E0	-3.413123969E2	4.481369483E2
8.983829108E0	-3.413058847E2	4.552500135E2
9.083649431E0	-3.470622946E2	4.597246706E2
9.183469754E0	-3.497283972E2	4.613889707E2
9.283290078E0	-3.475914186E2	4.660901050E2
9.383110401E0	-3.449462223E2	4.753386300E2
9.482930725E0	-3.434813660E2	4.704778905E2
9.582751048E0	-3.379891363E2	4.651927426E2
9.682571372E0	-3.327107780E2	4.633199779E2
9.782391695E0	-3.245690753E2	4.634515855E2
9.882212018E0	-3.179119459E2	4.649227304E2
9.982032342E0	-3.162403305E2	4.690525391E2];

function res=Fisher(X, alfa =.05)
  n = length(X);
  M1 = sum(X);
  M2 = sum(X.^2);
  M3 = sum(X.^3);
  M4 = sum(X.^4);
  K1 = M1/n;
  K2 = (n*M2-M1^2)/(n*(n-1));
  K3 = (n^2*M3-3*n*M2*M1+2*M1^3)/(n*(n-1)*(n-2));
  K4 = ((n^3+n^2)*M4-4*(n^2+n)*M3*M1-3*(n^2-n)*M2^2+12*M2*M1^2-6*M1^4)/(n*(n-1)*(n-2)*(n-3));
  res = zeros(2,3);
  res(1,1) = (K3/(K2*sqrt(K2)))*sqrt(n/6.);   # Skewness; mide la asimetria de la distribucion (si es 0 es simetrica)
  res(1,2) = (K4/K2^2)*sqrt(n/24.);           # Kurtosis; mide el ancho de las colas (si es 0 es gaussiana)
  res(1,3) = res(1)^2+res(2)^2;
  res(2,1:2) = -norminv(alfa/2)*[1,1];
  res(2,3) = chi2inv(alfa,2);
  if(abs(res(1,1))>res(2,1))
    disp("La muestra no pasa el test de Skewness (simetria)")
  endif
  if(abs(res(1,2))>res(2,2))
    disp("La muestra no pasa el test de Kurtosis (forma de la cola)")
  endif
  if(res(1,3)>res(2,3))
    disp("La muestra no pasa el test combinado")
  endif
 endfunction
 # Cada estimador se compara con "el que tiene abajo" en res. Osea, se rechaza si abs(res(1,i))>res(2,i), pero cada
 # test distinto puede dar distinta información sobre la distribucion:
 #    - Skewness: Si es negativo, la distribucion está virada hacia la izquierda; los valores menores a la media tienen
 #    mayor frecuencia. Si es positivo es al reves. Si es 0, es perfectamente simétrica.
 #    - Kurtosis: Analiza el peso de los outliers (valores atipicos, muy alejados de la media). Si es negativo, significa
 #    que las colas son muy finitas (los outliers son poco frecuentes respecto a la gaussiana). Si es positivo, los outliers
 #    soy muy frecuentes (nuevamente, respecto a la gaussiana). Si es 0, los outliers son como los de una gaussiana.
 #    - Test combinado: Esta parte parece alto chamuyo y no la entiendo (aun).
 
 function res=ws_test(X,alfa=.05)
  w = max(X)-min(X);  # Calculo el ancho total de la muestra
  s = std(X);         # Calculo su desvio estandar
  AlfasWS = [0.000 0.005 0.01 0.025 0.05 0.10]; # Estos son los UNICOS alphas posibles, cualquier otro se aproxima por el mayor mas cercano
  i = 1;
  while AlfasWS(i)<alfa
    i=i+1;
  endwhile
  TablaWS=[3 1.732 2.000 1.735 2.000 1.737 2.000 1.745 2.000 1.758 1.999 1.782 1.997;4 1.732 2.449 1.82 2.447 1.87 2.445 1.93 2.439 1.98 2.429 2.04 2.409;5 1.826 2.828 1.98 2.813 2.02 2.803 2.09 2.782 2.15 2.753 2.22 2.712;6 1.826 3.162 2.11 3.115 2.15 3.095 2.22 3.056 2.28 3.012 2.37 2.949;7 1.871 3.464 2.22 3.369 2.26 3.338 2.33 3.282 2.40 3.222 2.49 3.143;8 1.871 3.742 2.31 3.585 2.35 3.543 2.43 3.471 2.50 3.399 2.59 3.308;9 1.897 4.000 2.39 3.772 2.44 3.720 2.51 3.634 2.59 3.552 2.68 3.449;10 1.897 4.243 2.46 3.935 2.51 3.875 2.59 3.777 2.67 3.685 2.76 3.57;11 1.915 4.472 2.53 4.079 2.58 4.012 2.66 3.903 2.74 3.80 2.84 3.68;12 1.915 4.690 2.59 4.208 2.64 4.134 2.72 4.02 2.80 3.91 2.90 3.78;13 1.927 4.899 2.64 4.325 2.70 4.244 2.78 4.12 2.86 4.00 2.96 3.87;14 1.927 5.099 2.70 4.431 2.75 4.34 2.83 4.21 2.92 4.09 3.02 3.95;15 1.936 5.292 2.74 4.53 2.80 4.44 2.88 4.29 2.97 4.17 3.07 4.02;16 1.936 5.477 2.79 4.62 2.84 4.52 2.93 4.37 3.01 4.24 3.12 4.09;17 1.944 5.657 2.83 4.70 2.88 4.60 2.97 4.44 3.06 4.31 3.17 4.15;18 1.944 5.831 2.87 4.78 2.92 4.67 3.01 4.51 3.10 4.37 3.21 4.21;19 1.949 6.000 2.90 4.85 2.96 4.74 3.05 4.56 3.14 4.43 3.25 4.27;20 1.949 6.164 2.94 4.91 2.99 4.80 3.09 4.63 3.18 4.49 3.29 4.32;25 1.961 6.93 3.09 5.19 3.15 5.06 3.24 4.87 3.34 4.71 3.45 4.53;30 1.966 7.62 3.21 5.40 3.27 5.26 3.37 5.06 3.47 4.89 3.59 4.70;35 1.972 8.25 3.32 5.57 3.38 5.42 3.48 5.21 3.58 5.04 3.70 4.84;40 1.975 8.83 3.41 5.71 3.47 5.56 3.57 5.34 3.67 5.16 3.79 4.96;45 1.978 9.38 3.49 5.83 3.55 5.67 3.66 5.45 3.75 5.26 3.88 5.06;50 1.980 9.90 3.56 5.93 3.62 5.77 3.73 5.54 3.83 5.35 3.95 5.14;55 1.982 10.39 3.62 6.02 3.69 5.86 3.80 5.63 3.90 5.43 4.02 5.22;60 1.983 10.86 3.68 6.10 3.75 5.94 3.86 5.70 3.96 5.51 4.08 5.29;65 1.985 11.31 3.74 6.17 3.80 6.01 3.91 5.77 4.01 5.57 4.14 5.35;70 1.986 11.75 3.79 6.24 3.85 6.07 3.96 5.83 4.06 5.63 4.19 5.41;75 1.987 12.17 3.83 6.30 3.90 6.13 4.01 5.88 4.11 5.68 4.24 5.46;80 1.987 12.57 3.88 6.35 3.94 6.18 4.05 5.93 4.16 5.73 4.28 5.51;85 1.988 12.96 3.92 6.40 3.99 6.23 4.09 5.98 4.20 5.78 4.33 5.56;90 1.989 13.34 3.96 6.45 4.02 6.27 4.13 6.03 4.24 5.82 4.36 5.60;95 1.990 13.71 3.99 6.49 4.06 6.32 4.17 6.07 4.27 5.86 4.40 5.64;100 1.990 14.07 4.03 6.53 4.10 6.36 4.21 6.11 4.31 5.90 4.44 5.68;150 1.993 17.26 4.32 6.82 4.38 6.64 4.48 6.39 4.59 6.18 4.72 5.96;200 1.995 19.95 4.53 7.01 4.59 6.84 4.68 6.60 4.78 6.39 4.90 6.15;500 1.998 31.59 5.06 7.60 5.13 7.42 5.25 7.15 5.47 6.94 5.49 6.72;1000 1.999 44.70 5.50 7.99 5.57 7.80 5.68 7.54 5.79 7.33 5.92 7.11];
  j = 1;    # Arriba esta la tabla magica de la que se calculan los parametros criticos para una dada tolerancia
  while TablaWS(j)<length(X)
    j=j+1;
  endwhile
  res = [TablaWS(j,2*i) w/s TablaWS(j,2*i+1)]; # Si los 3 valores estan ordenados crecientemente, NO RECHAZA
 endfunction
 # Este test analiza la dispersion de los valores, asegurandose que el ancho total de muestras
 # no sea demasiado grande ni demasiado chico frente al desvío estandar gaussiano
 
 function res=chi2_equip(X, n=10, alfa=.05)
  N = length(X);
  p = 1/n;
  P = (1:n)/n;
  A = [-Inf,stdnormal_inv(P)];  # Defino los límites de cada intervalo entre -Inf e Inf con I{k} = (A{k};A{k+1}] tal
  O = zeros(1,n);               # que la proba de que un elemento de de la muestra este en I{k} es p (equiprobables)
  Y = (X-mean(X))/std(X);       # Estandarizo mi variable aleatoria (le impongo media nula y desvio estandar 1; es facil hacer la cuenta)
  for i=1:n
    O(i) = sum(A(i)<Y & Y<=A(i+1));  # Cuento la cantidad de mediciones en cada I{i}, sumando True/False
  endfor
  E = N*p;  # Defino la cantidad de valores esperados (teoricamente) en cada intervalo (que es la misma porque son equiprobables)
  chi2 = sum((O(1:n-1)-E).^2./E); # Calculo la distancia cuadrática entre ambas cantidades
  res = [chi2, chi2inv(1-alfa,n-1)];  # Si los valores estan ordenados crecientemente, NO RECHAZA
endfunction
# Este test separa el dominio de las muestras en intervalos equiprobables (respecto a la gaussiana)
# y chequea que en la muestra hay masomenos la misma cantidad de mediciones en cada uno de estos
# intervalos.
 
 function res=Kolmogorov_Smirnov(X,alfa=.05)
  N = length(X);
  A = [1.07 1.14 1.22 1.36 1.63];  # Estos valores definen e
  assert(N>35);   # Esto solo vale si hay mas de 35 muestras, sino la distribucion es una paja (hay que buscarla en tablas)
  Y = sort(X);    # Ordeno los valores para que sea más fácil calcular su distribucion acumulada 
  S(1) = 1./N;
  mu = mean(X);
  sigma = std(X);
  for i=2:N
    S(i) = S(i-1)+1./N;   # Distribucion acumulada observada; S(i) es la cantidad de valores menores o iguales a Y(i)
  endfor
  F = normcdf(Y,mu,sigma);  # Calculo la distribucion acumulada teórica en cada valor de Y (X pero ordenado)
  D = max(abs(F-S'));     # Norma infinito entre las distribuciones acumuladas (observada y teorica)
  Dalfa = A(5-round(alfa/.05))/sqrt(N);  # Calculo el parametro critico (defino la ZONA DE RECHAZO)
  res = [D, Dalfa];  # Si los valores estan ordenados crecientemente, NO RECHAZA
endfunction
# Este test analiza la "norma infinito" de la distancia entre la distribucion acumulada
# obtenida de la muestra y la del modelo propuesto, asegurandose que nunca se alejen demasiado.

# Tiempos y posiciones de cada particula; lo que sabemos es que los dx y dy deben ser normales (gaussianas)
# Sobre estas Mx,My con M la masa correspondiente hay que aplicar los tests
T = dataA(:,1);
X = dataA(:,2);
Y = dataA(:,3);
N = length(T);
Ax = X(2:N)-X(1:N-1);
Ay = Y(2:N)-Y(1:N-1);


T = dataB(:,1);
X = dataB(:,2);
Y = dataB(:,3);
N = length(T);
Bx = X(2:N)-X(1:N-1);
By = Y(2:N)-Y(1:N-1);